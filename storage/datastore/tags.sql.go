// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package datastore

import (
	"context"
)

const createTag = `-- name: CreateTag :exec
INSERT INTO tags (name)
          VALUES (?)
`

func (q *Queries) CreateTag(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createTag, name)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
UPDATE tags SET updated_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER), deleted_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER)
WHERE id = ?1 AND deleted_at = 0
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTagByID = `-- name: GetTagByID :one
SELECT id, name, created_at, updated_at, deleted_at FROM tags
WHERE id = ? AND deleted_at = 0
`

func (q *Queries) GetTagByID(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByID, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTagByName = `-- name: GetTagByName :one
SELECT id, name, created_at, updated_at, deleted_at FROM tags
WHERE name = ? AND deleted_at = 0
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAllTags = `-- name: ListAllTags :many
SELECT id, name, created_at, updated_at, deleted_at FROM tags
WHERE deleted_at = 0
ORDER BY name
`

func (q *Queries) ListAllTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :exec
UPDATE tags
SET name = ?, updated_at = CAST(unixepoch('subsecond') * 1000 as int)
WHERE id = ?
`

type UpdateTagParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) error {
	_, err := q.db.ExecContext(ctx, updateTag, arg.Name, arg.ID)
	return err
}
