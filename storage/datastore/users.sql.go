// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package datastore

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (email, name, password, salt)
           VALUES (?    , ?   , ?       , ?)
`

type CreateUserParams struct {
	Email    string
	Name     string
	Password []byte
	Salt     []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Email,
		arg.Name,
		arg.Password,
		arg.Salt,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET updated_at = CAST(unixepoch('subsecond') * 1000 as int), deleted_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER)
WHERE email = ?
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, email)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT email, name, password, salt, created_at, updated_at, verified_at, deleted_at FROM users
WHERE email = ? AND deleted_at > 0
ORDER BY name
`

func (q *Queries) GetAllUsers(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Email,
			&i.Name,
			&i.Password,
			&i.Salt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VerifiedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT  email, name, password, salt, created_at, updated_at, verified_at, deleted_at FROM users
WHERE email = ? AND deleted_at = 0
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserIsDeleted = `-- name: GetUserIsDeleted :one
SELECT true FROM users
WHERE email = ? AND deleted_at > 0
`

func (q *Queries) GetUserIsDeleted(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIsDeleted, email)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getUserIsVerified = `-- name: GetUserIsVerified :one
SELECT true FROM users
WHERE email = ? AND deleted_at = 0 AND verified_at > 0
`

func (q *Queries) GetUserIsVerified(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserIsVerified, email)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const setUserIsVerified = `-- name: SetUserIsVerified :one
UPDATE users SET verified_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER), updated_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER)
WHERE email = ?
RETURNING email, name, password, salt, created_at, updated_at, verified_at, deleted_at
`

func (q *Queries) SetUserIsVerified(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserIsVerified, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET email = ?, name = ?, updated_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER)
WHERE email = ?
`

type UpdateUserParams struct {
	Email   string
	Name    string
	Email_2 string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Email, arg.Name, arg.Email_2)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET password = ?, salt = ?, updated_at = CAST(unixepoch('subsecond') * 1000 AS INTEGER)
WHERE email = ?
RETURNING email, name, password, salt, created_at, updated_at, verified_at, deleted_at
`

type UpdateUserPasswordParams struct {
	Password []byte
	Salt     []byte
	Email    string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.Password, arg.Salt, arg.Email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.Password,
		&i.Salt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VerifiedAt,
		&i.DeletedAt,
	)
	return i, err
}
